Parameters:

  EnvName:
    Description: Env name that will be Tagged to resources
    Type: String

  VpcCIDR:
    Description: Enter the IP range for VPC
    Type: String
    Default: 10.0.0.0/16

  WebServersSubnet1CIDR:
    Description: Enter the IP range for subnet of webservers in AZ1
    Type: String
    Default: 10.0.10.0/24

  WebServersSubnet2CIDR:
    Description: Enter the IP range for subnet of webservers in AZ2
    Type: String
    Default: 10.0.11.0/24

  DBSubnet1CIDR:
    Description: Enter the IP range for subnet of db servers in AZ1
    Type: String
    Default: 10.0.20.0/24

  DBSubnet2CIDR:
    Description: Enter the IP range for subnet of db servers in AZ2
    Type: String
    Default: 10.0.21.0/24

  WebServerImageId:
    Description: EC2 WebServer image id
    Type: String
    Default: ami-0a313d6098716f372

  WebServerEC2Type:
    Description: EC2 WebServer instance type
    Type: String
    Default: t2.small

  WebServerMinCount:
    Description: The initial required count of WebServer instances
    Type: Number
    Default: '1'

  WebServerMaxCount:
    Description: The Maximum allowed count of WebServer instances
    Type: Number
    Default: '3'

  DBInstanceType:
    Description: DB Server instance type
    Type: String
    Default: db.t2.small

  DBStorage:
    Description: The size of the database in GB
    Type: Number
    Default: '3'

  KeyName:
      Description: EC2 KeyPair for SSH access to the instances provisioned
      Type: 'AWS::EC2::KeyPair::KeyName'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref WebServersSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet for WebServers in AZ1

  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref WebServersSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet for WebServers in AZ2

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref DBSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet for DB servers in AZ1

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref DBSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet for DB servers in AZ2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  WebSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnet1

  WebSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnet2

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: [!Ref WebSubnet1, !Ref WebSubnet2]

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP access via port 80 to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt
              - ApplicationLoadBalancer
              - SecurityGroups
      VpcId: !Ref VPC

  ASGLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref WebServerImageId
      InstanceType: !Ref WebServerEC2Type
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName

  WebServerASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: [!Ref WebSubnet1, !Ref WebSubnet2]
      LaunchConfigurationName: !Ref ASGLaunchConfig
      MinSize: !Ref WebServerMinCount
      MaxSize: !Ref WebServerMaxCount
      TargetGroupARNs: [!Ref ALBTargetGroup]

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
