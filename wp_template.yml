Parameters:

  EnvName:
    Description: Based on Env(Prod or Dev), HA or minimal stack is provisioned
    Type: String
    AllowedValues:
      - 'prod'
      - 'dev'
    ConstraintDescription: must be either prod or dev.

  VpcCIDR:
    Description: Enter the IP range for VPC
    Type: String
    Default: 10.0.0.0/16

  WebServersSubnet1CIDR:
    Description: Enter the IP range for subnet of webservers in AZ1
    Type: String
    Default: 10.0.10.0/24

  WebServersSubnet2CIDR:
    Description: Enter the IP range for subnet of webservers in AZ2
    Type: String
    Default: 10.0.11.0/24

  DBSubnet1CIDR:
    Description: Enter the IP range for subnet of db servers in AZ1
    Type: String
    Default: 10.0.20.0/24

  DBSubnet2CIDR:
    Description: Enter the IP range for subnet of db servers in AZ2
    Type: String
    Default: 10.0.21.0/24

  WebServerEC2Type:
    Description: EC2 WebServer instance type
    Type: String
    Default: t2.small

  WebServerMinCount:
    Description: The initial required count of Prod WebServer instances(always=1 for dev)
    Type: Number
    Default: '1'

  WebServerMaxCount:
    Description: The Maximum allowed count of Prod WebServer instances(always=1 for dev)
    Type: Number
    Default: '1'

  DBInstanceType:
    Description: DB instance type
    Type: String
    Default: db.t2.small

  DBStorage:
    Description: The size of the database in GB
    Type: Number
    Default: '3'

  DBName:
    Description: WordPress database name
    Type: String
    Default: wordpress

  DBMasterUser:
    NoEcho: 'true'
    Description: Master username for the database
    Type: String

  DBMasterPassword:
    NoEcho: 'true'
    Description: Password for master user
    Type: String

  KeyName:
      Description: EC2 KeyPair for SSH access to the instances provisioned
      Type: 'AWS::EC2::KeyPair::KeyName'

Mappings:
  RegionImageMap:
    us-east-1:
      "ubuntu": "ami-0a313d6098716f372"
    ap-southeast-2:
      "ubuntu": "ami-0b76c3b150c6b1423"

Conditions:

  conditionIsProd !Equals [ !Ref EnvName, "Prod" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref WebServersSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet for WebServers in AZ1

  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref WebServersSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Subnet for WebServers in AZ2

  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref DBSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet for DB servers in AZ1

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref DBSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Private Subnet for DB servers in AZ2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  WebSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnet1

  WebSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WebSubnet2

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP access via port 80 from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: [!Ref WebSubnet1, !Ref WebSubnet2]
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP access via port 80 to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt
              - ApplicationLoadBalancer
              - SecurityGroups
      VpcId: !Ref VPC

  ASGLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [RegionImageMap, !Ref "AWS::Region", ubuntu]
      InstanceType: !Ref WebServerEC2Type
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              apt-get update
            - |
              apt-get install apache2 -y
            - |
              apt-get install php -y
            - |
              apt-get install libapache2-mod-php -y
            - |
              apt-get install php-mysql -y
            - |
              wget https://wordpress.org/latest.tar.gz
            - |
              tar zxvf latest.tar.gz
            - |
              mv wordpress/* /var/www/html
            - >
              cp /var/www/html/wp-config-sample.php
              /var/www/html/wp-config.php
            - sed -i "s/'database_name_here'/'
            - !Ref DBName
            - |
              '/g" wp-config.php
            - sed -i "s/'username_here'/'
            - !Ref DBMasterUser
            - |
              '/g" wp-config.php
            - sed -i "s/'password_here'/'
            - !Ref DBMasterPassword
            - |
              '/g" wp-config.php
            - sed -i "s/'localhost'/'
            - !GetAtt
              - DBServer
              - Endpoint.Address
            - |
              '/g" wp-config.php
            - |
              rm /var/www/html/index.html
            - |
              systemctl restart apache2

  WebServerASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: [!Ref WebSubnet1, !Ref WebSubnet2]
      LaunchConfigurationName: !Ref ASGLaunchConfig
      MinSize: !If [conditionIsProd, !Ref WebServerMinCount, 1]
      MaxSize: !If [conditionIsProd, !Ref WebServerMaxCount, 1]
      TargetGroupARNs: [!Ref ALBTargetGroup]

  DBServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: database access for webservers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VPC

  DBServerSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: subnet group for DB servers
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds: [!Ref DBSubnet1, !Ref DBSubnet2]

  DBServer:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MultiAZ: conditionIsProd
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPassword
      DBInstanceClass: !Ref DBInstanceType
      AllocatedStorage: !Ref DBStorage
      DBSubnetGroupName: DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt
          - DBServerSecurityGroup
          - GroupId

Outputs:
  URL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ApplicationLoadBalancer
          - DNSName
    Description: WordPress URL
